server:
  port: 8080
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:h2:tcp://localhost/~/security;
    #jdbc:postgresql://데이터베이스주소:포트/데이터베이스이름
    username: sa
    password: sa
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: none
    #    properties:
#      hibernate:
#        type:
#          descriptor:
#            sql: trace #파라미터 값 표시
#        use_sql_comments: false #주석 표시
#        format_sql: true #들여쓰기 포맷
#        show-sql: true #ddl dml 표시
    database: h2
    open-in-view: false
    properties:
      hibernate:
        default_batch_fetch_size: 100
        format_sql: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: 56a100e92afd19d9447d114a4b7d93ec
            redirect-uri: http://localhost:3000/oauth2/code/kakao
            client-secret: 7ZJwB4witGTSyvb5cwRM4ivs2aB9dF0V
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: kakao
            scope:
              - profile_nickname
              - account_email
              - profile_image
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

#logging:
#  level:
#    org.hibernate.SQL: debug
#    org.hibernate.type: trace

jwt:
  header: Authorization
  secret: c2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQtc2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQK
  token-validity-in-seconds: 86400
  refresh-validity-in-seconds: 86400000  # 24시간 = 86400000
  access-validity-in-seconds: 3600000    # 1시간 = 3600000

frontend:
  url: http://localhost:3000
backend:
  url: http://localhost:8080
aws:
  iam:
    access-key: AKIA3BKENYK5NQIISC7F
    secret-key: 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
  cloudfront:
    url: http://localhost:3000
  api-gateway:
    prod:
      url: http://localhost:8080
    stage:
      url: http://localhost:8080
  dynamodb:
    refreshToken:
      table-name: refresh-token-table
    deviceToken:
      table-name: device-token-table
  s3:
    bucket: jwgio-bucket-local
  sns:
    platformApplicationArn: arn:aws:sns:ap-northeast-2:758742106810:app/GCM/FCJWGIO
    push-logo: Https://jwgio-bucket.s3.ap-northeast-2.amazonaws.com/logos/FCJWGIO_LOGO_192.png
    topic:
      create-match: arn:aws:sns:ap-northeast-2:758742106810:JWGIO-CREATE-MATCH
      complete-match: arn:aws:sns:ap-northeast-2:758742106810:JWGIO-COMPLETE-MATCH
  region: ap-northeast-2
